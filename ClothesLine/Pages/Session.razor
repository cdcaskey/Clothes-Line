@page "/session/{Id}/{Name}"
@using System.Text.Json
@using ClothesLine.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@using Methods = ClothesLine.Hubs.SignalRMethods.Session
@inject NavigationManager navManager
@implements IAsyncDisposable

<div class="container-fluid">
    <h1>Planning Session</h1>

    <p>This is session @Id</p>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <EditForm Model="this">
                    <InputRadioGroup @bind-Value="estimate">
                        @foreach (var option in options)
                        {
                            <InputRadio Value="@option.Key" id="@option.Key" class="btn-check d-none" />

                            if (option.Key == estimate)
                            {
                                <label for="@option.Key" class="btn btn-secondary mr-2">@option.Value</label>
                            }
                            else
                            {
                                <label for="@option.Key" class="btn btn-outline-secondary mr-2">@option.Value</label>
                            }
                        }
                    </InputRadioGroup>
                </EditForm>
            </div>
            <button @onclick="SendEstimate" class="btn btn-primary mr-2" disabled="@(!IsConnected && estimate >= 0)">Send</button>
            <button @onclick="ClearEstimates" class="btn btn-outline-danger" disabled="@(!IsConnected)">Clear Estimates</button>
        </div>

        <div class="col-md-6">
            <h2>Estimates</h2>
            <ul class="estimate-list">
                @foreach (var connection in connections.OrderBy(x => x.Value))
                {
                    if (estimates.TryGetValue(connection.Key, out var estimate))
                    {
                        <li><span>@connection.Value (@options[estimate])</span></li>
                    }
                    else
                    {
                        <li><span>@connection.Value</span></li>
                    }
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private int estimate = -1;
    private Dictionary<string, string> connections = new Dictionary<string, string>();
    private Dictionary<string, int> estimates = new Dictionary<string, int>();
    private Dictionary<int, string> options = new Dictionary<int, string>
{
        { 0, "0" },
        { 1, "XS" },
        { 2, "S" },
        { 3, "M" },
        { 5, "L" },
        { 8, "XL" },
        { 13, "XXL" },
        { 20, "Too Big" },
        { 100, "?" },
    };

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Name { get; set; }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/sessionhub"))
            .Build();

        SetupHubMethods();

        await hubConnection.StartAsync();
        await hubConnection.SendAsync(Methods.JoinSession, Id, Name);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await hubConnection.SendAsync(Methods.RequestData, Id);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void SetupHubMethods()
    {
        hubConnection.On<string>(Methods.NotifyUpdatedClients, json =>
        {
            var connectedClients = (IEnumerable<ConnectedClient>)JsonSerializer.Deserialize(json, typeof(IEnumerable<ConnectedClient>));

            connections = new Dictionary<string, string>(connectedClients.Select(c => new KeyValuePair<string, string>(c.Id, c.Name)));

            if (!estimates.Any())
            {
                estimates = new Dictionary<string, int>();

                foreach (var client in connectedClients)
                {
                    if (client.Estimate != null)
                    {
                        estimates.Add(client.Id, client.Estimate.Value);
                    }
                }
            }

            StateHasChanged();
        });

        hubConnection.On<string, int>(Methods.ReceiveEstimate, (estimator, estimate) =>
        {
            estimates[estimator] = estimate;
            StateHasChanged();
        });

        hubConnection.On(Methods.ClearEstimates, () =>
        {
            estimates.Clear();
            estimate = -1;
            StateHasChanged();
        });
    }

    private async Task SendEstimate()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync(Methods.SendEstimate, Id, estimate);
        }
    }

    private async Task ClearEstimates()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync(Methods.ClearEstimates, Id);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
