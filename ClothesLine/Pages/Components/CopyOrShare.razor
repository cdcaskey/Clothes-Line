@inject IJSRuntime JSRuntime

<div class="d-inline-flex align-items-center w-auto input-group">
    <input class="form-control" readonly type="text" value="@DisplayText" />
    
    @if (!string.IsNullOrEmpty(buttonText))
    {
        <div class="input-group-append">
            <button type="button" class="btn btn-primary" @onclick="CopyTextToClipboard" @onmouseout="ResetButtonText">@buttonText</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string DisplayText { get; set; }

    [Parameter]
    public string ShareTitle { get; set; }

    [Parameter]
    public string? ShareText { get; set; }

    [Parameter]
    public string Url { get; set; }

    private ButtonAction? buttonAction;
    private string buttonText;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ResetButtonText();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CopyTextToClipboard()
    {
        if (await GetButtonAction() == ButtonAction.Copy)
        {
            await JSRuntime.InvokeVoidAsync("copyText", Url);
            buttonText = "Copied";
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("shareLink", ShareTitle, ShareText, Url);
        }
    }

    private async Task<ButtonAction> GetButtonAction()
    {
        if (buttonAction.HasValue)
        {
            return buttonAction.Value;
        }

        try
        {
            var showCopy = await JSRuntime.InvokeAsync<bool>("showCopy");

            buttonAction = showCopy ? ButtonAction.Copy : ButtonAction.Share;
        }
        catch
        {
            buttonAction = ButtonAction.None;
        }

        return buttonAction.Value;
    }

    private async Task ResetButtonText()
    { 
        switch (await GetButtonAction())
        {
            case ButtonAction.Copy:
                buttonText = "Copy Text";
                return;

            case ButtonAction.Share:
                buttonText = "Share Text";
                return;

            default:
                buttonText = string.Empty;
                return;
        }
    }

    private enum ButtonAction
    {
        None,
        Copy,
        Share
    }
}
