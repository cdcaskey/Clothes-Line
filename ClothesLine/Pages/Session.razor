@page "/session/{Id}/{Name}"
@using System.Text.Json
@using ClothesLine.Hubs
@using ClothesLine.Pages.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Methods = ClothesLine.Hubs.SignalRMethods.Session
@inject NavigationManager navManager
@implements IAsyncDisposable

<div class="container-fluid">
    <h1>Planning Session</h1>

    <p>This is session <CopyOrShare DisplayText="@Id" ShareTitle="Join Clothes Line Session" ShareText="Click this link to join my Clothes Line session" Url="@($"{navManager.BaseUri}joinsession/{Id}")" /></p>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <EditForm Model="this">
                    <InputRadioGroup @bind-Value="Estimate">
                        @foreach (var option in options)
                        {
                            <InputRadio Value="@option.Key" id="@option.Key" class="btn-check d-none" />

                            string displayText = showNumbers && showEstimates && option.Key != 0 && option.Key != 100 ? $"{option.Value} ({option.Key})" : option.Value;

                            if (option.Key == Estimate)
                            {
                                <label for="@option.Key" class="btn btn-secondary estimate-option mx-1">@displayText</label>
                            }
                            else
                            {
                                <label for="@option.Key" class="btn btn-outline-secondary estimate-option mx-1">@displayText</label>
                            }
                        }
                    </InputRadioGroup>
                </EditForm>
            </div>
            
            <div class="button-toolbar" role="toolbar">
                <div class="btn-group me-2" role="group">
                    <button @onclick="SendEstimate" class="btn btn-primary small-screen-full-width my-1" disabled="@(!IsConnected || SendEstimateAutomatically || Estimate < 0)">Send</button>
                    <input id="sendAutomatically" type="checkbox" @onchange="() => SendEstimateAutomatically = !SendEstimateAutomatically" class="btn-check" />
                    <label for="sendAutomatically" class="btn btn-outline-primary my-1">Send Automatically</label>
                </div>
                <div class="btn-group me-2" role="group">
                    <button @onclick="ShowEstimates" class="@($"btn small-screen-full-width my-1 {(showEstimates ? "btn-success" : "btn-outline-success")}")" disabled="@(!IsConnected || !estimates.Any())">Show Estimates</button>
                </div>
                <div class="btn-group me-2" role="group">
                    <button @onclick="ClearEstimates" class="btn btn-outline-danger small-screen-full-width my-1" disabled="@(!IsConnected)">Clear Estimates</button>
                </div>
            </div>
            
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
  Launch demo modal
</button>
        </div>

        <div class="col-md-6">
            <h2>Estimates</h2>
            <ul class="estimate-list">
                @foreach (var connection in connections.OrderBy(x => x.Value))
                {
                    if (estimates.TryGetValue(connection.Key, out var estimate))
                    {
                        if (showEstimates)
                        {
                            <li class="@(IsOutlier(estimate) ? "estimate outlier" : "estimate ")"><span>@connection.Value (@options[estimate])</span></li>
                        }
                        else
                        {
                            <li class="estimate"><span>@connection.Value</span><span class="ms-2 oi oi-check" style="color: #28a745" /></li>
                        }
                    }
                    else
                    {
                        <li class="@(showEstimates ? "missing-estimate" : "estimate")"><span>@connection.Value</span></li>
                    }
                }
            </ul>
            
            @if (showEstimates)
            {
                <h5>Average: @CalculateAverage()</h5>
                <h5>Outliers: @CalculateOutliers() <span style="font-size:0.75em">(out of @estimates.Count)</span></h5>
                <h5>Variance: @CalculateVariance()</h5>
                <div class="form-check form-switch">
                    <input type="checkbox" class="form-check-input" id="ShowNumbers" @bind="ShowNumbers">
                    <label class="form-check-label" for="ShowNumbers">Show Numbers</label>
                </div>
            }
        </div>
    </div>

    <div class="modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title">T-Shirt Sizing</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                <p>
                    T-Shirt sizing is a method of agile estimation which allows extrapolation away from story points.
                    Instead of focussing on numbers (which inevitably ends up getting mapped to time), t-shirt sizing allows teams move away from X story points = a week.
                </p>

                <p>
                    Below is an example of a scale that can be used to help understand a mapping between how a story breaks down and the sizing to use. Feel free to disregard this:
                </p>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Size</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>0</td>
                            <td>No work is required/the work has already been done elsewhere</td>
                        </tr>
                        <tr>
                            <td>XS</td>
                            <td>There is some work, but not enough to be considered small</td>
                        </tr>
                        <tr>
                            <td>S</td>
                            <td>The story being estimated can't be broken down further than dev/test</td>
                        </tr>
                        <tr>
                            <td>M</td>
                            <td rowspan="3" class="align-middle">The story could be broken down further (and maybe it should be)</td>
                        </tr>
                        <tr>
                            <td>L</td>
                        </tr>
                        <tr>
                            <td>XL</td>
                        </tr>
                        <tr>
                            <td>XXL</td>
                            <td>The story needs be broken down into smaller tasks, but could be worked on if needed</td>
                        </tr>
                        <tr>
                            <td>Too Big</td>
                            <td>The story shouldn't be worked on until it has been broken down further</td>
                        </tr>
                        <tr>
                            <td>?</td>
                            <td>More information is needed about the story</td>
                        </tr>
                    </tbody>
                </table>
                </div>
                <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly Dictionary<int, string> options = new Dictionary<int, string>
    {
        { 0, "0" },
        { 1, "XS" },
        { 2, "S" },
        { 3, "M" },
        { 5, "L" },
        { 8, "XL" },
        { 13, "XXL" },
        { 20, "Too Big" },
        { 100, "?" },
    };

    private HubConnection? hubConnection;
    private int estimate = -1;
    private bool showEstimates = false;
    private bool showNumbers = false;
    private Dictionary<string, string> connections = new Dictionary<string, string>();
    private Dictionary<string, int> estimates = new Dictionary<string, int>();
    private bool sendEstimateAutomatically;

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Name { get; set; }

    public bool SendEstimateAutomatically
    {
        get => sendEstimateAutomatically;
        set
        {
            sendEstimateAutomatically = value;
            StateHasChanged();

            if (value)
            {
                SendEstimate();
            }
        }
    }

    public int Estimate
    {
        get => estimate;
        set
        {
            estimate = value;

            if (SendEstimateAutomatically && value > -1)
            {
                SendEstimate();
            }
        }
    }

    private bool ShowNumbers
    {
        get => showNumbers;
        set
        {
            showNumbers = value;
            StateHasChanged();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/sessionhub"))
            .Build();

        SetupHubMethods();

        await hubConnection.StartAsync();
        await hubConnection.SendAsync(Methods.JoinSession, Id, Name);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await hubConnection.SendAsync(Methods.RequestData, Id);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void SetupHubMethods()
    {
        hubConnection.On<string>(Methods.NotifyUpdatedClients, json =>
        {
            var connectedClients = (IEnumerable<ConnectedClient>)JsonSerializer.Deserialize(json, typeof(IEnumerable<ConnectedClient>));

            connections = new Dictionary<string, string>(connectedClients.Select(c => new KeyValuePair<string, string>(c.Id, c.Name)));

            if (!estimates.Any())
            {
                estimates = new Dictionary<string, int>();

                foreach (var client in connectedClients)
                {
                    if (client.Estimate != null)
                    {
                        estimates.Add(client.Id, client.Estimate.Value);
                    }
                }
            }

            StateHasChanged();
        });

        hubConnection.On<string, int>(Methods.ReceiveEstimate, (estimator, estimate) =>
        {
            estimates[estimator] = estimate;
            StateHasChanged();
        });

        hubConnection.On(Methods.ShowEstimates, () =>
        {
            showEstimates = true;
            StateHasChanged();
        });

        hubConnection.On(Methods.ClearEstimates, () =>
        {
            estimates.Clear();
            Estimate = -1;
            showEstimates = false;
            StateHasChanged();
        });
    }

    private async Task SendEstimate()
    {
        if (hubConnection is not null && Estimate > -1)
        {
            await hubConnection.SendAsync(Methods.SendEstimate, Id, Estimate);
        }
    }

    private async Task ShowEstimates()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync(Methods.ShowEstimates, Id);
        }
    }

    private async Task ClearEstimates()
    {
        if (hubConnection is not null)
        {
            showEstimates = false;
            await hubConnection.SendAsync(Methods.ClearEstimates, Id);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private (int SizeDown, int SizeUp)? CalculateSurroundingSizes()
    {
        if (!estimates.Any())
        {
            return null;
        }

        var average = estimates.Sum(e => e.Value) / (double)estimates.Count;
        var sizeDown = options.Keys.Where(o => o <= average).Max();
        var sizeUp = options.Keys.Where(o => o >= average).Min();

        return (sizeDown, sizeUp);
    }

    private string CalculateAverage()
    {
        var surroundingSizes = CalculateSurroundingSizes();

        if (surroundingSizes is null)
        {
            return "N/A";
        }

        var returnString = string.Empty;
        if (surroundingSizes.Value.SizeDown == surroundingSizes.Value.SizeUp)
        {
            returnString = options[surroundingSizes.Value.SizeDown];

            if (showNumbers)
            {
                returnString += $" ({surroundingSizes.Value.SizeDown})";
            }
        }
        else
        {
            returnString = $"{options[surroundingSizes.Value.SizeDown]} - {options[surroundingSizes.Value.SizeUp]}";

            if (showNumbers)
            {
                returnString += $" ({surroundingSizes.Value.SizeDown} - {surroundingSizes.Value.SizeUp})";
            }

            return returnString;
        }

        return returnString;
    }

    private string CalculateOutliers()
    {
        var surroundingSizes = CalculateSurroundingSizes();

        if (surroundingSizes is null)
        {
            return "N/A";
        }

        var outliers = estimates.Count(e => e.Value < surroundingSizes.Value.SizeDown || e.Value > surroundingSizes.Value.SizeUp);

        if (outliers == 0)
        {
            return "None";
        }

        return outliers.ToString();
    }

    private bool IsOutlier(int score)
    {
        var surroundingSizes = CalculateSurroundingSizes();

        if (surroundingSizes is null)
        {
            return false;
        }

        return score < surroundingSizes.Value.SizeDown || score > surroundingSizes.Value.SizeUp;
    }

    private string CalculateVariance()
    {
        if (!estimates.Any())
        {
            return "N/A";
        }

        if (estimates.Values.Min() == estimates.Values.Max())
        {
            return "None";
        }

        return $"{options[estimates.Values.Min()]} - {options[estimates.Values.Max()]}";
    }
}
